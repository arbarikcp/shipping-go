name: CI Checks

on:
  push:
    branches: # <1>
      - main
    tags:
      - v*      

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest # <2>
    steps:
    - name: Set up Go 1.x # <3>
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
    - name: Check out code into the Go module directory # <4>
      uses: actions/checkout@v2
    - name: Run Test
      run: make test
    - name: Coverage Check
      run: make coverage
    - name: Generate Report
      run: make report
    - name: Copy Files # <6>
      run: |
           mkdir  reports
           cp cover.html reports/.

    - name: Archive # <7>
      uses: actions/upload-artifact@v2
      with:
          name: reports # <8>
          path: reports

  build:
    name: Build App
    runs-on: ubuntu-latest # <2>
    needs: test
    steps:
    - name: Set up Go 1.x # <3>
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
    
    - name: Check out code into the Go module directory # <4>
      uses: actions/checkout@v2
      
    - name: Build
      run: make build # <5>
    
    - name: Copy Files # <6>
      run: |
           mkdir  artifacts
           cp api artifacts/.

    - name: Archive # <7>
      uses: actions/upload-artifact@v2
      with:
          name: api # <8>
          path: artifacts
  deliver:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith('refs/tags/v', github.ref) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download binary # <4>
        uses: actions/download-artifact@v2
        with:
          name: api
      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: true
          prerelease: true
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: api
          asset_name: api
          asset_content_type: application/octet-stream
  deploy:
    name: Deploy App
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Check out code into the Go module directory # <4>
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: "Heroku Setup"
      shell: bash
      run: |
        `cat >~/.netrc <<EOF
        machine api.heroku.com
            login $HEROKU_EMAIL
            password $HEROKU_AUTH_TOKEN
        machine git.heroku.com
            login $HEROKU_EMAIL
            password $HEROKU_AUTH_TOKEN
        EOF`
      env:
        HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
    - name: "Deploy to Heroku"
      run: |
          heroku config:set GO_LD_FLAGS="$(make ldflags)" -a holmes89-hello-api
          heroku buildpacks:clear -a holmes89-hello-api
          heroku buildpacks:set https://github.com/holmes89/heroku-buildpack-go.git -a holmes89-hello-api
          heroku git:remote --app holmes89-hello-api
          git push heroku main
  # deploy:
  #   name: Deploy App
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - name: Check out code into the Go module directory # <4>
  #     uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - name: "Heroku Setup"
  #     shell: bash
  #     run: |
  #       `cat >~/.netrc <<EOF
  #       machine api.heroku.com
  #           login $HEROKU_EMAIL
  #           password $HEROKU_AUTH_TOKEN
  #       machine git.heroku.com
  #           login $HEROKU_EMAIL
  #           password $HEROKU_AUTH_TOKEN
  #       EOF`
  #     env:
  #       HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
  #       HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
  #   - name: "Deploy to Heroku"
  #     run: |
  #         heroku git:remote --app holmes89-hello-api
  #         git push heroku main
